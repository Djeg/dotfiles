"
" General behavior
"
set mouse=a                     " Activate the mouse
set nocompatible                " Use vim defaults
let mapleader=","               " Use the comma as leader
set history=1000                " Increase history
set nobackup                    " Do not backup files on overwrite
set directory=~/.vim/tmp        " Directory to put swap file


" higlight the cursor line
set cursorline

if has('gui_running')
    set guifont=Monaco\ 12   " Mac OS X 10.5 default monospace font
endif

"
" Tabs & Indentation
"

set expandtab     " converts tabs to spaces
set autoindent    " automatically copy indentation from previous line
set smartindent   " indents one extra level according to current syntax
" indents with tab = 4 spaces
set tabstop=4
set shiftwidth=4
" fixme: should use softtabstop=4 instead of expandtab and setting tabstop

" define shortcuts ',2' and ',4' to change indentation easily:
nmap <leader>2 :set tabstop=2<cr>:set shiftwidth=2<cr>
nmap <leader>4 :set tabstop=4<cr>:set shiftwidth=4<cr>

"
" Interface
"

set ls=2                            " Always show the status line
set ruler                           " Show cursor position
set number                          " Show line numbers
set notitle                         " Don't show title in console title bar
set novisualbell                    " Don't use the visual bell
set wrap                            " Wrap lineource $MYVIMRC
set showmatch                       " Show matching (){}[]
set clipboard+=unnamed              " Allow to cp/p from clipboard

" Search options
set incsearch
set hlsearch
set ignorecase

if (has('gui_running'))
    set guioptions-=m               " Remove menu bar
    set guioptions-=T               " Remove toolbar
    set guioptions-=r               " Remove right-hand scroll bar
endif

" Easily switch between relative & absolute number
nmap <leader>na :set number<cr>
nmap <leader>nr :set relativenumber<cr>

" Automatically create save directory if it does not exist
au BufWrite * :call <SID>MkdirsIfNotExists(expand('<afile>:h'))
function! <SID>MkdirsIfNotExists(directory)
    if(!isdirectory(a:directory))
        call system('mkdir -p '.shellescape(a:directory))
    endif
endfunction

" Redraw screen
nmap <leader>r :redraw!<cr>

" Clear search highlight
nmap <silent> <leader>/ :let @/=""<cr>

"
" Command line
"

set wildmenu                        " Better completion
set wildmode=list:longest           " BASH style completion

"
" Navigation & Viewport
"

set scrolloff=5       " at least 5 lines of context when moving cursor
set sidescrolloff=5   " and 5 columns of contet
set hidden                          " Allow switch beetween modified buffers
set backspace=indent,eol,start      " Improve backspacing

" Restore cursor position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Faster viewport scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
nnoremap <C-j> 3j
nnoremap <C-k> 3k

"
" Chars
"

set encoding=utf-8

"
" Syntax & File types
"

syntax enable                       " Enable syntax highlighting
filetype off          " enable file type detection

" Use the htmljinja syntax for twig files
au BufNewFile,BufRead *.twig set ft=htmljinja

" Use the haskell filetype for hss files
au BufNewFile,BufRead *.hsc set ft=haskell

" automatically remove trailing whitespace before write
function! StripTrailingWhitespace()
  normal mZ
  %s/\s\+$//e
  if line("'Z") != line(".")
    echo "Stripped whitespace\n"
  endif
  normal `Z
endfunction

map <F2> :call StripTrailingWhitespace()<CR>
map! <F2> :call StripTrailingWhitespace()<CR>

"
" Some sugar on my Keyboard
"

" in insert mode (imap), some useful shortcuts.
imap jj `
imap kk \

" TODO get rid of this specific config
set wildignore=data/**,app/cache/**,web/bundles/**

"
" Vundle configuration
"
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Let vundle manage the vundle
Bundle 'gmarik/vundle'

Bundle 'The-NERD-tree'
Bundle 'ctrlp.vim'
Bundle 'UltiSnips'
Bundle 'arnaud-lb/vim-php-namespace'
Bundle 'airblade/vim-gitgutter'
Bundle 'Lokaltog/vim-distinguished.git'
Bundle 'Valloric/YouCompleteMe.git'
Bundle 'terryma/vim-multiple-cursors.git'
Bundle 'docteurklein/vim-symfony.git'
Bundle 'kana/vim-smartinput.git'

filetype plugin indent on

"
" UltiSnips comportment
"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"
" Coloration
"
set t_Co=256
colorscheme molokai

" Add some keys map
nnoremap <C-x> :NERDTreeToggle<CR>

" Configure NERDTree
let NERDTreeQuitOnOpen=1

" PHP namespace
inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
noremap <Leader>u :call PhpInsertUse()<CR>

" YCM configuration
set completeopt=menuone

" MultiCursor configuration
let g:multi_cursor_start_key='<C-d>'

" vim-symfony configuration
let g:symfony_app_console_caller= "php"
let g:symfony_app_console_path= "app/console"
