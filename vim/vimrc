"
" General behavior
"
set nocompatible                " Use vim defaults
let mapleader=","               " Use the comma as leader
set history=1000                " Increase history
set nobackup                    " Do not backup files on overwrite
set directory=~/.vim/tmp        " Directory to put swap file
set colorcolumn=86

" higlight the cursor line
set cursorline

"
" Tabs & Indentation
"

set expandtab     " converts tabs to spaces
set autoindent    " automatically copy indentation from previous line
set smartindent   " indents one extra level according to current syntax
" indents with tab = 4 spaces
set tabstop=4
set shiftwidth=4
set list
set listchars=eol:ᛎ,trail:‧,tab:▹∙,nbsp:ⅹ
if has('gui_running')
    set listchars=eol:ᛎ,trail:‧,tab:▹∙,nbsp:ⅹ
endif
" fixme: should use softtabstop=4 instead of expandtab and setting tabstop

" define shortcuts ',2' and ',4' to change indentation easily:
nmap <leader>2 :set tabstop=2<cr>:set shiftwidth=2<cr>
nmap <leader>4 :set tabstop=4<cr>:set shiftwidth=4<cr>

"
" Interface
"
set ls=2                            " Always show the status line
set ruler                           " Show cursor position
set number                          " Show line numbers
set notitle                         " Don't show title in console title bar
set novisualbell                    " Don't use the visual bell
set wrap                            " Wrap lineource $MYVIMRC
set showmatch                       " Show matching (){}[]
set clipboard+=unnamed              " Allow to cp/p from clipboard

"Change line numbers color
autocmd InsertEnter * hi LineNr      ctermfg=16 ctermbg=214 guifg=Orange guibg=#151515
autocmd InsertLeave * hi LineNr      term=underline ctermfg=59 ctermbg=232 guifg=#605958 guibg=#151515

" Search options
set incsearch
set hlsearch
set ignorecase

if (has('gui_running'))
    set guioptions-=m               " Remove menu bar
    set guioptions-=T               " Remove toolbar
    set guioptions-=r               " Remove right-hand scroll bar
endif

" Easily switch between relative & absolute number
nmap <leader>na :set number<cr>
nmap <leader>nr :set relativenumber<cr>

" Automatically create save directory if it does not exist
au BufWrite * :call <SID>MkdirsIfNotExists(expand('<afile>:h'))
function! <SID>MkdirsIfNotExists(directory)
    if(!isdirectory(a:directory))
        call system('mkdir -p '.shellescape(a:directory))
    endif
endfunction

" Redraw screen
nmap <leader>r :redraw!<cr>

" Clear search highlight
nmap <silent> <leader>/ :let @/=""<cr>

"
" Command line
"

set wildmenu                        " Better completion
set wildmode=list:longest           " BASH style completion

"
" Navigation & Viewport
"
set scrolloff=5       " at least 5 lines of context when moving cursor
set sidescrolloff=5   " and 5 columns of contet
set hidden                          " Allow switch beetween modified buffers
set backspace=indent,eol,start      " Improve backspacing

" Restore cursor position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Faster viewport scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
nnoremap <C-j> 3j
nnoremap <C-k> 3k

"
" Chars
"

set encoding=utf-8

"
" Syntax & File types
"

syntax enable                       " Enable syntax highlighting
filetype off          " enable file type detection

" Use the htmljinja syntax for twig files
au BufNewFile,BufRead *.twig set ft=htmljinja

" Use the haskell filetype for hss files
au BufNewFile,BufRead *.hsc set ft=haskell

" Use the dart filetype for dart files
au BufNewFile,BufRead *.dart set ft=dart

" Use he mardown syntax for *.md files
au BufNewFile,BufRead *md set ft=markdown

match ErrorMsg '\s\+$'
silent! set listchars+=nbsp:~
" automatically remove trailing whitespace before write
function! StripTrailingWhitespace()
  normal mZ
  %s/\s\+$//e
  if line("'Z") != line(".")
    echo "Stripped whitespace\n"
  endif
  normal `Z
endfunction

map <silent> <F2> :call StripTrailingWhitespace()<CR>
map! <silent> <F2> :call StripTrailingWhitespace()<CR>

" in insert mode (imap), some useful shortcuts.
imap jj `
imap kk \

" TODO get rid of this specific config
set wildignore=data/**,app/cache/**,web/bundles/**,src/*/*Bundle/vendor,src/*/vendor,old/*

"
" Vundle configuration
"
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

set tags+=vendor.tags

" Let vundle manage the vundle
Bundle 'gmarik/vundle'

Bundle 'The-NERD-tree'
Bundle 'UltiSnips'
Bundle 'wincent/Command-T'
Bundle 'arnaud-lb/vim-php-namespace'
Bundle 'airblade/vim-gitgutter'
Bundle 'Lokaltog/vim-distinguished.git'
Bundle 'docteurklein/vim-symfony.git'
Bundle 'kana/vim-smartinput.git'
Bundle 'danro/rename.vim.git'
Bundle 'lunaru/vim-less'
Bundle 'hail2u/vim-css3-syntax.git'
Bundle 'Lokaltog/vim-powerline.git'
Bundle 'godlygeek/tabular.git'
Bundle 'tpope/vim-fugitive.git'
Bundle 'sjbach/lusty.git'
Bundle 'mileszs/ack.vim.git'
Bundle 'Herzult/phpspec-vim.git'
Bundle 'vim-scripts/bufkill.vim.git'
Bundle 'tobyS/vmustache.git'
Bundle 'tobyS/pdv'

filetype plugin indent on

"
" PDV
"
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <Leader><C-p> :call pdv#DocumentWithSnip()<CR>
nnoremap <Leader>d :call pdv#DocumentCurrentLine()<CR>

"
" Command-T mapping
"
let g:CommandTMaxHeight=10
let g:CommandTHighlightColor='molokai'
let g:CommandTRefreshMap='<F5>'
nnoremap <silent> <C-p> :CommandT<CR>
nnoremap <silent> <C-b> :CommandTBuffer<CR>

"
" UltiSnips comportment
"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

let g:Powerline_symbols = 'fancy'

"
" Coloration
"
set t_Co=256
colorscheme molokai

" force to never use arrow for navigation !
nmap <Up> <nop>
nmap <Down> <nop>
nmap <Left> <nop>
nmap <Right> <nop>

" Add some keys map
nnoremap <C-x> :NERDTreeToggle<CR>
vnoremap <Leader>: :Tabularize /:<CR>
vnoremap <Leader>/ :Tabularize /:\zs<CR>
vnoremap <Leader>= :Tabularize /=<CR>
vnoremap <Leader>> :Tabularize /=><CR>
vnoremap <Leader>$ :Tabularize /\$/l0r1<CR>
nnoremap <Leader>t :!ctags -R --PHP-kinds=+cf<CR>
nnoremap <Leader>v :source ~/.vimrc<CR>

" easy navigation between words
nmap <C-l> w
nmap <C-h> b

" easy select all
nmap <Leader>a gg<S-v><S-g><CR>

" esay copy-paste clipboard
vmap <Leader>y "+y<CR>
nmap <leader>p "+p<CR>

" clear vim cache
nnoremap <Leader><C-c> :!rm -rf ~/.vim/tmp/*<CR>

" easy buffer navigation
nmap <Leader>b <Leader>lb
nnoremap <Leader>ll :bn<CR>
nnoremap <Leader>hh :bp<CR>
nnoremap <Leader>q :BD<CR>
nmap <Leader>f <Leader>lr

map <M-a>v <C-c>

" Easy tags jump
nmap <silent> <Leader>m "zyiw:exe ":ts ".@z.""<CR>
nmap <silent> <Leader>j "zyiw:exe ":tselect ".@z.""<CR>

" configure NERDTree
set modifiable

" PHP namespace
inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
noremap <Leader>u :call PhpInsertUse()<CR>
inoremap <Leader>e <C-O>:call PhpExpandClass()<CR>
noremap <Leader>e :call PhpExpandClass()<CR>


" ctrlp configuration
let g:ctrlp_working_path_mode = 0

" vim-symfony configuration
let g:symfony_app_console_caller= "php"
let g:symfony_app_console_path= "app/console"
