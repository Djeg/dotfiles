snippet pcl "Display a class" !b
<?php

namespace ${1:namespace};

class ${2:Class} ${3:otherStuf...}
{
    ${0://implementation ...}
}
endsnippet

snippet fun "A simple function snippet" !b
${1:public} function ${2:name}(${3:\$value})
{
    ${0://some code here ...}
}
endsnippet

snippet attr "Display an attribute" !b
${1:public} \$${2:value};
endsnippet

snippet use "Use statement" !b
use ${1:Class};
endsnippet

snippet getset "Generate getter and setter" !b
/**
 * Get $1
 *
 * @return ${2:string}
 */
public function get${1/(.*)/\u$1/}()
{
    return \$this->$1;
}

/**
 * Set ${1:var}
 *
 * @param ${2:string} \$$1
 * @return ${3:ClassName}
 */
public function set${1/(.*)/\u$1/}(\$$1)
{
    \$this->$1 = \$$1;

    return \$this;
}
endsnippet

snippet docattr "Generate doctrine attribute" !b
/**
 * @var string \$${1:name}
 * @ORM\Column(name="${2:column_name}", type="${3:string}")
 */
private \$${1:name};
endsnippet

snippet ormcl "Generate a dotrine ORM class" !b
<?php

namespace ${1:App\Entity};

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="${2:table_name}")
 */
class ${2:ClassName}
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private \$id;
}
endsnippet

snippet author "Generate an author doc" !b
@author David Jegat <david.jegat@gmail.com>
endsnippet

snippet gearsfile "Generate a corect gears head file" !b
/*
 * This file is litle piece of GearsAdminBundle Package.
 *
 * (c) david jegat <david.jegat@gmail.com>
 *
 * This code is under the MIT licence. For the full copyright and
 * licence please read the LICENSE file distributed with this package.
 */

endsnippet

snippet docl "Generate a class with docstrings" !b
/**
 * ${1:description}
 *
 * @author David Jegat <david.jegat@gmail.com>
 */
class ${2:ClassName} ${3:otherStuff}
{
    ${0:// implementation ...}
}
endsnippet

snippet docfun "Generate function with a corect docstring" !b
/**
 * ${4:description ....}
 * 
 * @param ${5:params}
 * @return ${6:return}
 */
${1:public} function ${2:name}(${3:\$value})
{
    ${0://some code here ...}
}
endsnippet

snippet speccl "Generate a phpspec class" !b
<?php

namespace spec\${1:Namespace};

use PhpSpec\ObjectBehavior;

class ${2:ClassName} extends ObjectBehavior
{
   function it_should_be_initializable()
   {
        \$this->shouldHaveType('${1:Namespace}\${2ClassName}');    
   }
}
endsnippet

snippet dd "Die and dump a variable" !b
die(var_dump(\$${1:var}));
endsnippet
