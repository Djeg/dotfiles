global !p
import re

def toUppercase(match):
	return match.group(1).upper()

def toFunctionName(name):
	name = name.lower()
	regexp = re.compile('_([a-z])')
	return regexp.sub(toUppercase, name)

def toHumanName(name):
	name = name.lower()
	regexp = re.compile('_')
	return regexp.sub(' ', name)

def toObjectName(name):
	name = name.lower()
	regexp = re.compile('_([a-z])')
	name = regexp.sub(toUppercase, name)
	subject = [word[0].upper() + word[1:] for word in name.split()]
	return ''.join(subject)
endglobal

snippet t "Define a type" !b
# type ${1:Name} :: $2
$0
endsnippet

snippet rt "Define a record type" !b
# type ${1:Name} :: {
#   $2
# }
$0
endsnippet

snippet rt1 "Define a record type of 1 generic" !b
# ${1:Name} ${2:a} :: {
#   $3
# }
$0
endsnippet

snippet rt2 "Define a record type of 2 generic" !b
# ${1:Name} ${2:a} ${3:b} :: {
#   $4
# }
$0
endsnippet

snippet u "Define a type union" !b
# ${1:Name} ::
#   | $2
$0
endsnippet

snippet req "Require" !b
require! '$1': { $0 }
endsnippet

snippet ip "Import" !b
import '$1': { $0 }
endsnippet

snippet ipa "Import all" !b
import '$0'
endsnippet

snippet ipd "Import default" !b
import '$1': $0
endsnippet

snippet itr "Import type" !b
it "$1" ->
	$0
endsnippet

snippet it "Import type as" !b
it "$1" !->
	$0
endsnippet

snippet use "import a type" !b
# import type '$1' ($0)
endsnippet

snippet usea "import a type as" !b
# import type '$1' as $0
endsnippet

snippet m "Define a member" !b
# ${1:name} :: $2
$1 = ($3) -> $0
endsnippet

snippet mc "Define a currified member" !b
# ${1:name} :: $2
$1 = ($3) --> $0
endsnippet

snippet em "export a defined a member" !b
# ${1:name} :: $2
export $1 = ($3) -> $0
endsnippet

snippet emc "Export a currified member" !b
# ${1:name} :: $2
export $1 = ($3) --> $0
endsnippet

snippet rac "Define a redux action" !b
# type `!p snip.rv = toObjectName(t[1])`Action :: {
#   type :: Symbol
# }

# ${1:name} :: Symbol
export $1 = Symbol '`!p snip.rv = toHumanName(t[1])`'

# `!p snip.rv = toFunctionName(t[1])` :: () -> `!p snip.rv = toObjectName(t[1])`Action
export `!p snip.rv = toFunctionName(t[1])` = -> { type: $1 }
$0
endsnippet

snippet rac1 "Define a redux action of 1 argument" !b
# type `!p snip.rv = toObjectName(t[1])`Action :: {
#   type :: Symbol
#   $2 :: $3
# }

# ${1:name} :: Symbol
export $1 = Symbol '`!p snip.rv = toHumanName(t[1])`'

# `!p snip.rv = toFunctionName(t[1])` :: $3 -> `!p snip.rv = toObjectName(t[1])`Action
export `!p snip.rv = toFunctionName(t[1])` = ($2) ->
  type: $1
  $2: $2
$0
endsnippet

snippet rac2 "Define a redux action of 2 argument" !b
# type `!p snip.rv = toObjectName(t[1])`Action :: {
#   type :: Symbol
#   $2 :: $3
#   $4 :: $5
# }

# ${1:name} :: Symbol
export $1 = Symbol '`!p snip.rv = toHumanName(t[1])`'

# `!p snip.rv = toFunctionName(t[1])` :: $3 -> $5 -> `!p snip.rv = toObjectName(t[1])`Action
export `!p snip.rv = toFunctionName(t[1])` = ($2, $4) -->
  type: $1
  $2: $2
  $4: $4
$0
endsnippet

snippet rac3 "Define a redux action of 3 argument" !b
# type `!p snip.rv = toObjectName(t[1])`Action :: {
#   type :: Symbol
#   $2 :: $3
#   $4 :: $5
#   $6 :: $7
# }

# ${1:name} :: Symbol
export $1 = Symbol '`!p snip.rv = toHumanName(t[1])`'

# `!p snip.rv = toFunctionName(t[1])` :: $3 -> $5 -> $7 -> `!p snip.rv = toObjectName(t[1])`Action
export `!p snip.rv = toFunctionName(t[1])` = ($2, $4, $6) -->
  type: $1
  $2: $2
  $4: $4
  $6: $6
$0
endsnippet

snippet desc "Describe a module" !b
describe '${1:Module}' !->
  $0
endsnippet

snippet test "Test a member" !b
it '${1:Member}' !->
  $0
endsnippet
